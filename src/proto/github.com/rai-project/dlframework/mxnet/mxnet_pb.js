/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require("../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js");
goog.exportSymbol("proto.carml.org.mxnet.ContainerArchicture", null, global);
goog.exportSymbol("proto.carml.org.mxnet.ErrorStatus", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Feature", null, global);
goog.exportSymbol("proto.carml.org.mxnet.MXNetInferenceRequest", null, global);
goog.exportSymbol("proto.carml.org.mxnet.MXNetInferenceResponse", null, global);
goog.exportSymbol(
  "proto.carml.org.mxnet.MXNetModelInformationRequest",
  null,
  global
);
goog.exportSymbol("proto.carml.org.mxnet.Model", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Model.Graph", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Model.Graph.Node", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Model.Graph.NodeEntry", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Model.Information", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Model.Input", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Model.Output", null, global);
goog.exportSymbol("proto.carml.org.mxnet.ModelInformations", null, global);
goog.exportSymbol("proto.carml.org.mxnet.Null", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.ErrorStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.ErrorStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.ErrorStatus.displayName =
    "proto.carml.org.mxnet.ErrorStatus";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.ErrorStatus.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.ErrorStatus.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.ErrorStatus} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.ErrorStatus.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        ok: jspb.Message.getFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.ErrorStatus}
 */
proto.carml.org.mxnet.ErrorStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.ErrorStatus();
  return proto.carml.org.mxnet.ErrorStatus.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.ErrorStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.ErrorStatus}
 */
proto.carml.org.mxnet.ErrorStatus.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {boolean} */ = reader.readBool();
        msg.setOk(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.ErrorStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.ErrorStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.ErrorStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.ErrorStatus.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool ok = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.carml.org.mxnet.ErrorStatus.prototype.getOk = function() {
  return /** @type {boolean} */ jspb.Message.getFieldWithDefault(
    this,
    1,
    false
  );
};

/** @param {boolean} value */
proto.carml.org.mxnet.ErrorStatus.prototype.setOk = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.carml.org.mxnet.ErrorStatus.prototype.getMessage = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.mxnet.ErrorStatus.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.ContainerArchicture = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.ContainerArchicture, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.ContainerArchicture.displayName =
    "proto.carml.org.mxnet.ContainerArchicture";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.ContainerArchicture.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.ContainerArchicture.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.ContainerArchicture} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.ContainerArchicture.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        gpu: jspb.Message.getFieldWithDefault(msg, 1, ""),
        cpu: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.ContainerArchicture}
 */
proto.carml.org.mxnet.ContainerArchicture.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.ContainerArchicture();
  return proto.carml.org.mxnet.ContainerArchicture.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.ContainerArchicture} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.ContainerArchicture}
 */
proto.carml.org.mxnet.ContainerArchicture.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setGpu(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setCpu(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.ContainerArchicture.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.ContainerArchicture.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.ContainerArchicture} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.ContainerArchicture.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getGpu();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCpu();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string gpu = 1;
 * @return {string}
 */
proto.carml.org.mxnet.ContainerArchicture.prototype.getGpu = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.ContainerArchicture.prototype.setGpu = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string cpu = 2;
 * @return {string}
 */
proto.carml.org.mxnet.ContainerArchicture.prototype.getCpu = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.mxnet.ContainerArchicture.prototype.setCpu = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.displayName = "proto.carml.org.mxnet.Model";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model}
 */
proto.carml.org.mxnet.Model.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model();
  return proto.carml.org.mxnet.Model.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model}
 */
proto.carml.org.mxnet.Model.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model.Input = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.Model.Input.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.Model.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.Input.displayName =
    "proto.carml.org.mxnet.Model.Input";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.Model.Input.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Input.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.Input.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model.Input} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Input.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, ""),
        dimensionsList: jspb.Message.getField(msg, 2)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model.Input}
 */
proto.carml.org.mxnet.Model.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model.Input();
  return proto.carml.org.mxnet.Model.Input.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model.Input}
 */
proto.carml.org.mxnet.Model.Input.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setType(value);
        break;
      case 2:
        var value /** @type {!Array.<number>} */ = reader.readPackedInt64();
        msg.setDimensionsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model.Input} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.Input.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDimensionsList();
  if (f.length > 0) {
    writer.writePackedInt64(2, f);
  }
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Input.prototype.getType = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Input.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated int64 dimensions = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.carml.org.mxnet.Model.Input.prototype.getDimensionsList = function() {
  return /** @type {!Array.<number>} */ jspb.Message.getField(this, 2);
};

/** @param {!Array.<number>} value */
proto.carml.org.mxnet.Model.Input.prototype.setDimensionsList = function(
  value
) {
  jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Input.prototype.addDimensions = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.carml.org.mxnet.Model.Input.prototype.clearDimensionsList = function() {
  this.setDimensionsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model.Output = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.Model.Output.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.Model.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.Output.displayName =
    "proto.carml.org.mxnet.Model.Output";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.Model.Output.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Output.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.Output.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model.Output} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Output.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        labelsList: jspb.Message.getField(msg, 1)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model.Output}
 */
proto.carml.org.mxnet.Model.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model.Output();
  return proto.carml.org.mxnet.Model.Output.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model.Output}
 */
proto.carml.org.mxnet.Model.Output.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.addLabels(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model.Output} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.Output.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string labels = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.carml.org.mxnet.Model.Output.prototype.getLabelsList = function() {
  return /** @type {!Array.<string>} */ jspb.Message.getField(this, 1);
};

/** @param {!Array.<string>} value */
proto.carml.org.mxnet.Model.Output.prototype.setLabelsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Output.prototype.addLabels = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.carml.org.mxnet.Model.Output.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model.Information = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.Model.Information.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.Model.Information, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.Information.displayName =
    "proto.carml.org.mxnet.Model.Information";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.Model.Information.repeatedFields_ = [11, 12];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Information.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.Information.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model.Information} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Information.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        containerMap: (f = msg.getContainerMap())
          ? f.toObject(
              includeInstance,
              proto.carml.org.mxnet.ContainerArchicture.toObject
            )
          : [],
        framework: jspb.Message.getFieldWithDefault(msg, 3, ""),
        version: jspb.Message.getFieldWithDefault(msg, 4, ""),
        type: jspb.Message.getFieldWithDefault(msg, 5, ""),
        datasetName: jspb.Message.getFieldWithDefault(msg, 6, ""),
        graphUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
        weightsUrl: jspb.Message.getFieldWithDefault(msg, 8, ""),
        featuresUrl: jspb.Message.getFieldWithDefault(msg, 9, ""),
        input:
          (f = msg.getInput()) &&
            proto.carml.org.mxnet.Model.Input.toObject(includeInstance, f),
        meanImageList: jspb.Message.getRepeatedFloatingPointField(msg, 11),
        referencesList: jspb.Message.getField(msg, 12)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model.Information}
 */
proto.carml.org.mxnet.Model.Information.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model.Information();
  return proto.carml.org.mxnet.Model.Information.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model.Information} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model.Information}
 */
proto.carml.org.mxnet.Model.Information.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setName(value);
        break;
      case 2:
        var value = msg.getContainerMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.carml.org.mxnet.ContainerArchicture
              .deserializeBinaryFromReader
          );
        });
        break;
      case 3:
        var value /** @type {string} */ = reader.readString();
        msg.setFramework(value);
        break;
      case 4:
        var value /** @type {string} */ = reader.readString();
        msg.setVersion(value);
        break;
      case 5:
        var value /** @type {string} */ = reader.readString();
        msg.setType(value);
        break;
      case 6:
        var value /** @type {string} */ = reader.readString();
        msg.setDatasetName(value);
        break;
      case 7:
        var value /** @type {string} */ = reader.readString();
        msg.setGraphUrl(value);
        break;
      case 8:
        var value /** @type {string} */ = reader.readString();
        msg.setWeightsUrl(value);
        break;
      case 9:
        var value /** @type {string} */ = reader.readString();
        msg.setFeaturesUrl(value);
        break;
      case 10:
        var value = new proto.carml.org.mxnet.Model.Input();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.Model.Input.deserializeBinaryFromReader
        );
        msg.setInput(value);
        break;
      case 11:
        var value /** @type {!Array.<number>} */ = reader.readPackedFloat();
        msg.setMeanImageList(value);
        break;
      case 12:
        var value /** @type {string} */ = reader.readString();
        msg.addReferences(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.Information.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.Information.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model.Information} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.Information.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getContainerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.carml.org.mxnet.ContainerArchicture.serializeBinaryToWriter
    );
  }
  f = message.getFramework();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getDatasetName();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getGraphUrl();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getWeightsUrl();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getFeaturesUrl();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.carml.org.mxnet.Model.Input.serializeBinaryToWriter
    );
  }
  f = message.getMeanImageList();
  if (f.length > 0) {
    writer.writePackedFloat(11, f);
  }
  f = message.getReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedString(12, f);
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * map<string, ContainerArchicture> container = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.carml.org.mxnet.ContainerArchicture>}
 */
proto.carml.org.mxnet.Model.Information.prototype.getContainerMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!proto.carml.org.mxnet.ContainerArchicture>} */ jspb.Message.getMapField(
    this,
    2,
    opt_noLazyCreate,
    proto.carml.org.mxnet.ContainerArchicture
  );
};

proto.carml.org.mxnet.Model.Information.prototype.clearContainerMap = function() {
  this.getContainerMap().clear();
};

/**
 * optional string framework = 3;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getFramework = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setFramework = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string version = 4;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional string type = 5;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getType = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional string dataset_name = 6;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getDatasetName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 6, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setDatasetName = function(
  value
) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional string graph_url = 7;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getGraphUrl = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 7, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setGraphUrl = function(
  value
) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional string weights_url = 8;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getWeightsUrl = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 8, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setWeightsUrl = function(
  value
) {
  jspb.Message.setField(this, 8, value);
};

/**
 * optional string features_url = 9;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Information.prototype.getFeaturesUrl = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 9, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Information.prototype.setFeaturesUrl = function(
  value
) {
  jspb.Message.setField(this, 9, value);
};

/**
 * optional Input input = 10;
 * @return {?proto.carml.org.mxnet.Model.Input}
 */
proto.carml.org.mxnet.Model.Information.prototype.getInput = function() {
  return /** @type{?proto.carml.org.mxnet.Model.Input} */ jspb.Message.getWrapperField(
    this,
    proto.carml.org.mxnet.Model.Input,
    10
  );
};

/** @param {?proto.carml.org.mxnet.Model.Input|undefined} value */
proto.carml.org.mxnet.Model.Information.prototype.setInput = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};

proto.carml.org.mxnet.Model.Information.prototype.clearInput = function() {
  this.setInput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.mxnet.Model.Information.prototype.hasInput = function() {
  return jspb.Message.getField(this, 10) != null;
};

/**
 * repeated float mean_image = 11;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.carml.org.mxnet.Model.Information.prototype.getMeanImageList = function() {
  return /** @type {!Array.<number>} */ jspb.Message.getRepeatedFloatingPointField(
    this,
    11
  );
};

/** @param {!Array.<number>} value */
proto.carml.org.mxnet.Model.Information.prototype.setMeanImageList = function(
  value
) {
  jspb.Message.setField(this, 11, value || []);
};

/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Information.prototype.addMeanImage = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};

proto.carml.org.mxnet.Model.Information.prototype.clearMeanImageList = function() {
  this.setMeanImageList([]);
};

/**
 * repeated string references = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.carml.org.mxnet.Model.Information.prototype.getReferencesList = function() {
  return /** @type {!Array.<string>} */ jspb.Message.getField(this, 12);
};

/** @param {!Array.<string>} value */
proto.carml.org.mxnet.Model.Information.prototype.setReferencesList = function(
  value
) {
  jspb.Message.setField(this, 12, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Information.prototype.addReferences = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};

proto.carml.org.mxnet.Model.Information.prototype.clearReferencesList = function() {
  this.setReferencesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model.Graph = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.Model.Graph.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.Model.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.Graph.displayName =
    "proto.carml.org.mxnet.Model.Graph";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.Model.Graph.repeatedFields_ = [1, 2, 3, 4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Graph.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.Graph.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model.Graph} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Graph.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        nodesList: jspb.Message.toObjectList(
          msg.getNodesList(),
          proto.carml.org.mxnet.Model.Graph.Node.toObject,
          includeInstance
        ),
        argNodesList: jspb.Message.getField(msg, 2),
        nodeRowPtrList: jspb.Message.getField(msg, 3),
        headsList: jspb.Message.toObjectList(
          msg.getHeadsList(),
          proto.carml.org.mxnet.Model.Graph.NodeEntry.toObject,
          includeInstance
        ),
        attrsMap: (f = msg.getAttrsMap())
          ? f.toObject(includeInstance, undefined)
          : []
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model.Graph}
 */
proto.carml.org.mxnet.Model.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model.Graph();
  return proto.carml.org.mxnet.Model.Graph.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model.Graph}
 */
proto.carml.org.mxnet.Model.Graph.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.carml.org.mxnet.Model.Graph.Node();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.Model.Graph.Node.deserializeBinaryFromReader
        );
        msg.addNodes(value);
        break;
      case 2:
        var value /** @type {!Array.<number>} */ = reader.readPackedInt64();
        msg.setArgNodesList(value);
        break;
      case 3:
        var value /** @type {!Array.<number>} */ = reader.readPackedInt64();
        msg.setNodeRowPtrList(value);
        break;
      case 4:
        var value = new proto.carml.org.mxnet.Model.Graph.NodeEntry();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.Model.Graph.NodeEntry
            .deserializeBinaryFromReader
        );
        msg.addHeads(value);
        break;
      case 5:
        var value = msg.getAttrsMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model.Graph} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.Graph.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.carml.org.mxnet.Model.Graph.Node.serializeBinaryToWriter
    );
  }
  f = message.getArgNodesList();
  if (f.length > 0) {
    writer.writePackedInt64(2, f);
  }
  f = message.getNodeRowPtrList();
  if (f.length > 0) {
    writer.writePackedInt64(3, f);
  }
  f = message.getHeadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.carml.org.mxnet.Model.Graph.NodeEntry.serializeBinaryToWriter
    );
  }
  f = message.getAttrsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      5,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.Model.Graph.NodeEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.Graph.NodeEntry.displayName =
    "proto.carml.org.mxnet.Model.Graph.NodeEntry";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.Graph.NodeEntry.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model.Graph.NodeEntry} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Graph.NodeEntry.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        nodeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        index: jspb.Message.getFieldWithDefault(msg, 2, 0),
        version: jspb.Message.getFieldWithDefault(msg, 3, 0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model.Graph.NodeEntry}
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model.Graph.NodeEntry();
  return proto.carml.org.mxnet.Model.Graph.NodeEntry.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model.Graph.NodeEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model.Graph.NodeEntry}
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {number} */ = reader.readInt64();
        msg.setNodeId(value);
        break;
      case 2:
        var value /** @type {number} */ = reader.readInt64();
        msg.setIndex(value);
        break;
      case 3:
        var value /** @type {number} */ = reader.readInt64();
        msg.setVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.Graph.NodeEntry.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model.Graph.NodeEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getNodeId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * optional int64 node_id = 1;
 * @return {number}
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.getNodeId = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.setNodeId = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 index = 2;
 * @return {number}
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.getIndex = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 2, 0);
};

/** @param {number} value */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.setIndex = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 version = 3;
 * @return {number}
 */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.getVersion = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 3, 0);
};

/** @param {number} value */
proto.carml.org.mxnet.Model.Graph.NodeEntry.prototype.setVersion = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Model.Graph.Node = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.Model.Graph.Node.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.Model.Graph.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Model.Graph.Node.displayName =
    "proto.carml.org.mxnet.Model.Graph.Node";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.Model.Graph.Node.repeatedFields_ = [4, 6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Graph.Node.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Model.Graph.Node.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Model.Graph.Node} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Model.Graph.Node.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        op: jspb.Message.getFieldWithDefault(msg, 1, ""),
        paramMap: (f = msg.getParamMap())
          ? f.toObject(includeInstance, undefined)
          : [],
        name: jspb.Message.getFieldWithDefault(msg, 3, ""),
        inputsList: jspb.Message.toObjectList(
          msg.getInputsList(),
          proto.carml.org.mxnet.Model.Graph.NodeEntry.toObject,
          includeInstance
        ),
        backwardSourceId: jspb.Message.getFieldWithDefault(msg, 5, 0),
        controlDepsList: jspb.Message.getField(msg, 6)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Model.Graph.Node}
 */
proto.carml.org.mxnet.Model.Graph.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Model.Graph.Node();
  return proto.carml.org.mxnet.Model.Graph.Node.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Model.Graph.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Model.Graph.Node}
 */
proto.carml.org.mxnet.Model.Graph.Node.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setOp(value);
        break;
      case 2:
        var value = msg.getParamMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString
          );
        });
        break;
      case 3:
        var value /** @type {string} */ = reader.readString();
        msg.setName(value);
        break;
      case 4:
        var value = new proto.carml.org.mxnet.Model.Graph.NodeEntry();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.Model.Graph.NodeEntry
            .deserializeBinaryFromReader
        );
        msg.addInputs(value);
        break;
      case 5:
        var value /** @type {number} */ = reader.readInt64();
        msg.setBackwardSourceId(value);
        break;
      case 6:
        var value /** @type {!Array.<number>} */ = reader.readPackedInt64();
        msg.setControlDepsList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Model.Graph.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Model.Graph.Node} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Model.Graph.Node.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getOp();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getParamMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      2,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.carml.org.mxnet.Model.Graph.NodeEntry.serializeBinaryToWriter
    );
  }
  f = message.getBackwardSourceId();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getControlDepsList();
  if (f.length > 0) {
    writer.writePackedInt64(6, f);
  }
};

/**
 * optional string op = 1;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.getOp = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Graph.Node.prototype.setOp = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * map<string, string> param = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.getParamMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ jspb.Message.getMapField(
    this,
    2,
    opt_noLazyCreate,
    null
  );
};

proto.carml.org.mxnet.Model.Graph.Node.prototype.clearParamMap = function() {
  this.getParamMap().clear();
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.getName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Model.Graph.Node.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * repeated NodeEntry inputs = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.mxnet.Model.Graph.NodeEntry>}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.getInputsList = function() {
  return /** @type{!Array.<!proto.carml.org.mxnet.Model.Graph.NodeEntry>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.mxnet.Model.Graph.NodeEntry,
    4
  );
};

/** @param {!Array.<!proto.carml.org.mxnet.Model.Graph.NodeEntry>} value */
proto.carml.org.mxnet.Model.Graph.Node.prototype.setInputsList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.carml.org.mxnet.Model.Graph.NodeEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.mxnet.Model.Graph.NodeEntry}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.addInputs = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.carml.org.mxnet.Model.Graph.NodeEntry,
    opt_index
  );
};

proto.carml.org.mxnet.Model.Graph.Node.prototype.clearInputsList = function() {
  this.setInputsList([]);
};

/**
 * optional int64 backward_source_id = 5;
 * @return {number}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.getBackwardSourceId = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 5, 0);
};

/** @param {number} value */
proto.carml.org.mxnet.Model.Graph.Node.prototype.setBackwardSourceId = function(
  value
) {
  jspb.Message.setField(this, 5, value);
};

/**
 * repeated int64 control_deps = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.getControlDepsList = function() {
  return /** @type {!Array.<number>} */ jspb.Message.getField(this, 6);
};

/** @param {!Array.<number>} value */
proto.carml.org.mxnet.Model.Graph.Node.prototype.setControlDepsList = function(
  value
) {
  jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Graph.Node.prototype.addControlDeps = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

proto.carml.org.mxnet.Model.Graph.Node.prototype.clearControlDepsList = function() {
  this.setControlDepsList([]);
};

/**
 * repeated Node nodes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.mxnet.Model.Graph.Node>}
 */
proto.carml.org.mxnet.Model.Graph.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.carml.org.mxnet.Model.Graph.Node>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.mxnet.Model.Graph.Node,
    1
  );
};

/** @param {!Array.<!proto.carml.org.mxnet.Model.Graph.Node>} value */
proto.carml.org.mxnet.Model.Graph.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.carml.org.mxnet.Model.Graph.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.mxnet.Model.Graph.Node}
 */
proto.carml.org.mxnet.Model.Graph.prototype.addNodes = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.carml.org.mxnet.Model.Graph.Node,
    opt_index
  );
};

proto.carml.org.mxnet.Model.Graph.prototype.clearNodesList = function() {
  this.setNodesList([]);
};

/**
 * repeated int64 arg_nodes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.carml.org.mxnet.Model.Graph.prototype.getArgNodesList = function() {
  return /** @type {!Array.<number>} */ jspb.Message.getField(this, 2);
};

/** @param {!Array.<number>} value */
proto.carml.org.mxnet.Model.Graph.prototype.setArgNodesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Graph.prototype.addArgNodes = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.carml.org.mxnet.Model.Graph.prototype.clearArgNodesList = function() {
  this.setArgNodesList([]);
};

/**
 * repeated int64 node_row_ptr = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.carml.org.mxnet.Model.Graph.prototype.getNodeRowPtrList = function() {
  return /** @type {!Array.<number>} */ jspb.Message.getField(this, 3);
};

/** @param {!Array.<number>} value */
proto.carml.org.mxnet.Model.Graph.prototype.setNodeRowPtrList = function(
  value
) {
  jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.carml.org.mxnet.Model.Graph.prototype.addNodeRowPtr = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

proto.carml.org.mxnet.Model.Graph.prototype.clearNodeRowPtrList = function() {
  this.setNodeRowPtrList([]);
};

/**
 * repeated NodeEntry heads = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.mxnet.Model.Graph.NodeEntry>}
 */
proto.carml.org.mxnet.Model.Graph.prototype.getHeadsList = function() {
  return /** @type{!Array.<!proto.carml.org.mxnet.Model.Graph.NodeEntry>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.mxnet.Model.Graph.NodeEntry,
    4
  );
};

/** @param {!Array.<!proto.carml.org.mxnet.Model.Graph.NodeEntry>} value */
proto.carml.org.mxnet.Model.Graph.prototype.setHeadsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.carml.org.mxnet.Model.Graph.NodeEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.mxnet.Model.Graph.NodeEntry}
 */
proto.carml.org.mxnet.Model.Graph.prototype.addHeads = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    4,
    opt_value,
    proto.carml.org.mxnet.Model.Graph.NodeEntry,
    opt_index
  );
};

proto.carml.org.mxnet.Model.Graph.prototype.clearHeadsList = function() {
  this.setHeadsList([]);
};

/**
 * map<string, string> attrs = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.carml.org.mxnet.Model.Graph.prototype.getAttrsMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ jspb.Message.getMapField(
    this,
    5,
    opt_noLazyCreate,
    null
  );
};

proto.carml.org.mxnet.Model.Graph.prototype.clearAttrsMap = function() {
  this.getAttrsMap().clear();
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.ModelInformations = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.ModelInformations.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.ModelInformations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.ModelInformations.displayName =
    "proto.carml.org.mxnet.ModelInformations";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.ModelInformations.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.ModelInformations.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.ModelInformations.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.ModelInformations} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.ModelInformations.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        infoList: jspb.Message.toObjectList(
          msg.getInfoList(),
          proto.carml.org.mxnet.Model.Information.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.ModelInformations}
 */
proto.carml.org.mxnet.ModelInformations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.ModelInformations();
  return proto.carml.org.mxnet.ModelInformations.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.ModelInformations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.ModelInformations}
 */
proto.carml.org.mxnet.ModelInformations.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.carml.org.mxnet.Model.Information();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.Model.Information.deserializeBinaryFromReader
        );
        msg.addInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.ModelInformations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.ModelInformations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.ModelInformations} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.ModelInformations.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.carml.org.mxnet.Model.Information.serializeBinaryToWriter
    );
  }
};

/**
 * repeated Model.Information info = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.mxnet.Model.Information>}
 */
proto.carml.org.mxnet.ModelInformations.prototype.getInfoList = function() {
  return /** @type{!Array.<!proto.carml.org.mxnet.Model.Information>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.mxnet.Model.Information,
    1
  );
};

/** @param {!Array.<!proto.carml.org.mxnet.Model.Information>} value */
proto.carml.org.mxnet.ModelInformations.prototype.setInfoList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.carml.org.mxnet.Model.Information=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.mxnet.Model.Information}
 */
proto.carml.org.mxnet.ModelInformations.prototype.addInfo = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.carml.org.mxnet.Model.Information,
    opt_index
  );
};

proto.carml.org.mxnet.ModelInformations.prototype.clearInfoList = function() {
  this.setInfoList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.MXNetInferenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.MXNetInferenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.MXNetInferenceRequest.displayName =
    "proto.carml.org.mxnet.MXNetInferenceRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.MXNetInferenceRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.MXNetInferenceRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.MXNetInferenceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.MXNetInferenceRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        modelName: jspb.Message.getFieldWithDefault(msg, 2, ""),
        url: jspb.Message.getFieldWithDefault(msg, 3, ""),
        data: msg.getData_asB64()
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.MXNetInferenceRequest}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.MXNetInferenceRequest();
  return proto.carml.org.mxnet.MXNetInferenceRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.MXNetInferenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.MXNetInferenceRequest}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setId(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setModelName(value);
        break;
      case 3:
        var value /** @type {string} */ = reader.readString();
        msg.setUrl(value);
        break;
      case 4:
        var value /** @type {!Uint8Array} */ = reader.readBytes();
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.MXNetInferenceRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.MXNetInferenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.MXNetInferenceRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.getId = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string model_name = 2;
 * @return {string}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.getModelName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.setModelName = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string url = 3;
 * @return {string}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.getUrl = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};

/** @param {string} value */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(
    this,
    4,
    ""
  );
};

/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ jspb.Message.bytesAsB64(this.getData());
};

/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getData());
};

/** @param {!(string|Uint8Array)} value */
proto.carml.org.mxnet.MXNetInferenceRequest.prototype.setData = function(
  value
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Feature.displayName = "proto.carml.org.mxnet.Feature";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Feature.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Feature.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Feature} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Feature.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        index: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        probability: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Feature}
 */
proto.carml.org.mxnet.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Feature();
  return proto.carml.org.mxnet.Feature.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Feature}
 */
proto.carml.org.mxnet.Feature.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {number} */ = reader.readInt64();
        msg.setIndex(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setName(value);
        break;
      case 3:
        var value /** @type {number} */ = reader.readFloat();
        msg.setProbability(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Feature} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Feature.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getProbability();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
};

/**
 * optional int64 index = 1;
 * @return {number}
 */
proto.carml.org.mxnet.Feature.prototype.getIndex = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.carml.org.mxnet.Feature.prototype.setIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.carml.org.mxnet.Feature.prototype.getName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.mxnet.Feature.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional float probability = 3;
 * @return {number}
 */
proto.carml.org.mxnet.Feature.prototype.getProbability = function() {
  return /** @type {number} */ +jspb.Message.getFieldWithDefault(this, 3, 0.0);
};

/** @param {number} value */
proto.carml.org.mxnet.Feature.prototype.setProbability = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.MXNetInferenceResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.mxnet.MXNetInferenceResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.mxnet.MXNetInferenceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.MXNetInferenceResponse.displayName =
    "proto.carml.org.mxnet.MXNetInferenceResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.mxnet.MXNetInferenceResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.MXNetInferenceResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.MXNetInferenceResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.MXNetInferenceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.MXNetInferenceResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        featuresList: jspb.Message.toObjectList(
          msg.getFeaturesList(),
          proto.carml.org.mxnet.Feature.toObject,
          includeInstance
        ),
        error:
          (f = msg.getError()) &&
            proto.carml.org.mxnet.ErrorStatus.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.MXNetInferenceResponse}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.MXNetInferenceResponse();
  return proto.carml.org.mxnet.MXNetInferenceResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.MXNetInferenceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.MXNetInferenceResponse}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setId(value);
        break;
      case 2:
        var value = new proto.carml.org.mxnet.Feature();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.Feature.deserializeBinaryFromReader
        );
        msg.addFeatures(value);
        break;
      case 3:
        var value = new proto.carml.org.mxnet.ErrorStatus();
        reader.readMessage(
          value,
          proto.carml.org.mxnet.ErrorStatus.deserializeBinaryFromReader
        );
        msg.setError(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.MXNetInferenceResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.MXNetInferenceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.MXNetInferenceResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.carml.org.mxnet.Feature.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.carml.org.mxnet.ErrorStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.getId = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Feature features = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.mxnet.Feature>}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.getFeaturesList = function() {
  return /** @type{!Array.<!proto.carml.org.mxnet.Feature>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.mxnet.Feature,
    2
  );
};

/** @param {!Array.<!proto.carml.org.mxnet.Feature>} value */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.setFeaturesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.carml.org.mxnet.Feature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.mxnet.Feature}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.addFeatures = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.carml.org.mxnet.Feature,
    opt_index
  );
};

proto.carml.org.mxnet.MXNetInferenceResponse.prototype.clearFeaturesList = function() {
  this.setFeaturesList([]);
};

/**
 * optional ErrorStatus error = 3;
 * @return {?proto.carml.org.mxnet.ErrorStatus}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.getError = function() {
  return /** @type{?proto.carml.org.mxnet.ErrorStatus} */ jspb.Message.getWrapperField(
    this,
    proto.carml.org.mxnet.ErrorStatus,
    3
  );
};

/** @param {?proto.carml.org.mxnet.ErrorStatus|undefined} value */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.setError = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.carml.org.mxnet.MXNetInferenceResponse.prototype.clearError = function() {
  this.setError(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.mxnet.MXNetInferenceResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.MXNetModelInformationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.MXNetModelInformationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.MXNetModelInformationRequest.displayName =
    "proto.carml.org.mxnet.MXNetModelInformationRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.MXNetModelInformationRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.MXNetModelInformationRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.MXNetModelInformationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.MXNetModelInformationRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        modelName: jspb.Message.getFieldWithDefault(msg, 1, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.MXNetModelInformationRequest}
 */
proto.carml.org.mxnet.MXNetModelInformationRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.MXNetModelInformationRequest();
  return proto.carml.org.mxnet.MXNetModelInformationRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.MXNetModelInformationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.MXNetModelInformationRequest}
 */
proto.carml.org.mxnet.MXNetModelInformationRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setModelName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.MXNetModelInformationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.MXNetModelInformationRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.MXNetModelInformationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.MXNetModelInformationRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.carml.org.mxnet.MXNetModelInformationRequest.prototype.getModelName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.mxnet.MXNetModelInformationRequest.prototype.setModelName = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.mxnet.Null = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.mxnet.Null, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.mxnet.Null.displayName = "proto.carml.org.mxnet.Null";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.mxnet.Null.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.mxnet.Null.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.mxnet.Null} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.mxnet.Null.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.mxnet.Null}
 */
proto.carml.org.mxnet.Null.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.mxnet.Null();
  return proto.carml.org.mxnet.Null.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.mxnet.Null} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.mxnet.Null}
 */
proto.carml.org.mxnet.Null.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.mxnet.Null.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.mxnet.Null.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.mxnet.Null} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.mxnet.Null.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};

goog.object.extend(exports, proto.carml.org.mxnet);
