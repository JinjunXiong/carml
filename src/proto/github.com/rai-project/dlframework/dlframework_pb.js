/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var google_protobuf_struct_pb = require("google-protobuf/google/protobuf/struct_pb.js");
var google_api_annotations_pb = require("../../../google/api/annotations_pb.js");
var github_com_gogo_protobuf_gogoproto_gogo_pb = require("../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js");
goog.exportSymbol(
  "proto.carml.org.dlframework.ContainerHardware",
  null,
  global
);
goog.exportSymbol("proto.carml.org.dlframework.ErrorStatus", null, global);
goog.exportSymbol(
  "proto.carml.org.dlframework.FrameworkManifest",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.GetFrameworkManifestRequest",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.GetFrameworkManifestsResponse",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.GetFrameworkModelManifestRequest",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.GetModelManifestRequest",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.GetModelManifestsResponse",
  null,
  global
);
goog.exportSymbol("proto.carml.org.dlframework.ModelManifest", null, global);
goog.exportSymbol(
  "proto.carml.org.dlframework.ModelManifest.Model",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.ModelManifest.Type",
  null,
  global
);
goog.exportSymbol(
  "proto.carml.org.dlframework.ModelManifest.Type.Parameter",
  null,
  global
);
goog.exportSymbol("proto.carml.org.dlframework.Null", null, global);
goog.exportSymbol("proto.carml.org.dlframework.PredictRequest", null, global);
goog.exportSymbol("proto.carml.org.dlframework.PredictResponse", null, global);
goog.exportSymbol(
  "proto.carml.org.dlframework.PredictionFeature",
  null,
  global
);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.ErrorStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.ErrorStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.ErrorStatus.displayName =
    "proto.carml.org.dlframework.ErrorStatus";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.ErrorStatus.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.ErrorStatus.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.ErrorStatus} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.ErrorStatus.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        ok: jspb.Message.getFieldWithDefault(msg, 1, false),
        message: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.ErrorStatus}
 */
proto.carml.org.dlframework.ErrorStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.ErrorStatus();
  return proto.carml.org.dlframework.ErrorStatus.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.ErrorStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.ErrorStatus}
 */
proto.carml.org.dlframework.ErrorStatus.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {boolean} */ = reader.readBool();
        msg.setOk(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.ErrorStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.ErrorStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.ErrorStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.ErrorStatus.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool ok = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.carml.org.dlframework.ErrorStatus.prototype.getOk = function() {
  return /** @type {boolean} */ jspb.Message.getFieldWithDefault(
    this,
    1,
    false
  );
};

/** @param {boolean} value */
proto.carml.org.dlframework.ErrorStatus.prototype.setOk = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string message = 2;
 * @return {string}
 */
proto.carml.org.dlframework.ErrorStatus.prototype.getMessage = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ErrorStatus.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.ContainerHardware = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.ContainerHardware, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.ContainerHardware.displayName =
    "proto.carml.org.dlframework.ContainerHardware";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.ContainerHardware.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.ContainerHardware.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.ContainerHardware} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.ContainerHardware.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        gpu: jspb.Message.getFieldWithDefault(msg, 1, ""),
        cpu: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.ContainerHardware}
 */
proto.carml.org.dlframework.ContainerHardware.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.ContainerHardware();
  return proto.carml.org.dlframework.ContainerHardware.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.ContainerHardware} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.ContainerHardware}
 */
proto.carml.org.dlframework.ContainerHardware.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setGpu(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setCpu(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.ContainerHardware.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.ContainerHardware.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.ContainerHardware} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.ContainerHardware.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getGpu();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCpu();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string gpu = 1;
 * @return {string}
 */
proto.carml.org.dlframework.ContainerHardware.prototype.getGpu = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ContainerHardware.prototype.setGpu = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string cpu = 2;
 * @return {string}
 */
proto.carml.org.dlframework.ContainerHardware.prototype.getCpu = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ContainerHardware.prototype.setCpu = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.FrameworkManifest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.FrameworkManifest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.FrameworkManifest.displayName =
    "proto.carml.org.dlframework.FrameworkManifest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.FrameworkManifest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.FrameworkManifest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.FrameworkManifest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.FrameworkManifest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        version: jspb.Message.getFieldWithDefault(msg, 2, ""),
        containerMap: (f = msg.getContainerMap())
          ? f.toObject(
              includeInstance,
              proto.carml.org.dlframework.ContainerHardware.toObject
            )
          : []
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.FrameworkManifest}
 */
proto.carml.org.dlframework.FrameworkManifest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.FrameworkManifest();
  return proto.carml.org.dlframework.FrameworkManifest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.FrameworkManifest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.FrameworkManifest}
 */
proto.carml.org.dlframework.FrameworkManifest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setName(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setVersion(value);
        break;
      case 3:
        var value = msg.getContainerMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.carml.org.dlframework.ContainerHardware
              .deserializeBinaryFromReader
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.FrameworkManifest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.FrameworkManifest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.FrameworkManifest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.FrameworkManifest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getContainerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.carml.org.dlframework.ContainerHardware.serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.carml.org.dlframework.FrameworkManifest.prototype.getName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.FrameworkManifest.prototype.setName = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string version = 2;
 * @return {string}
 */
proto.carml.org.dlframework.FrameworkManifest.prototype.getVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.FrameworkManifest.prototype.setVersion = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * map<string, ContainerHardware> container = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.carml.org.dlframework.ContainerHardware>}
 */
proto.carml.org.dlframework.FrameworkManifest.prototype.getContainerMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!proto.carml.org.dlframework.ContainerHardware>} */ jspb.Message.getMapField(
    this,
    3,
    opt_noLazyCreate,
    proto.carml.org.dlframework.ContainerHardware
  );
};

proto.carml.org.dlframework.FrameworkManifest.prototype.clearContainerMap = function() {
  this.getContainerMap().clear();
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.ModelManifest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.dlframework.ModelManifest.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.dlframework.ModelManifest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.ModelManifest.displayName =
    "proto.carml.org.dlframework.ModelManifest";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.dlframework.ModelManifest.repeatedFields_ = [6, 8];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.ModelManifest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.ModelManifest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        name: jspb.Message.getFieldWithDefault(msg, 1, ""),
        version: jspb.Message.getFieldWithDefault(msg, 2, ""),
        framework:
          (f = msg.getFramework()) &&
            proto.carml.org.dlframework.FrameworkManifest.toObject(
              includeInstance,
              f
            ),
        containerMap: (f = msg.getContainerMap())
          ? f.toObject(
              includeInstance,
              proto.carml.org.dlframework.ContainerHardware.toObject
            )
          : [],
        description: jspb.Message.getFieldWithDefault(msg, 5, ""),
        referenceList: jspb.Message.getField(msg, 6),
        license: jspb.Message.getFieldWithDefault(msg, 7, ""),
        inputsList: jspb.Message.toObjectList(
          msg.getInputsList(),
          proto.carml.org.dlframework.ModelManifest.Type.toObject,
          includeInstance
        ),
        output:
          (f = msg.getOutput()) &&
            proto.carml.org.dlframework.ModelManifest.Type.toObject(
              includeInstance,
              f
            ),
        beforePreprocess: jspb.Message.getFieldWithDefault(msg, 10, ""),
        preprocess: jspb.Message.getFieldWithDefault(msg, 11, ""),
        afterPreprocess: jspb.Message.getFieldWithDefault(msg, 12, ""),
        beforePostprocess: jspb.Message.getFieldWithDefault(msg, 13, ""),
        postprocess: jspb.Message.getFieldWithDefault(msg, 14, ""),
        afterPostprocess: jspb.Message.getFieldWithDefault(msg, 15, ""),
        model:
          (f = msg.getModel()) &&
            proto.carml.org.dlframework.ModelManifest.Model.toObject(
              includeInstance,
              f
            ),
        attributesMap: (f = msg.getAttributesMap())
          ? f.toObject(includeInstance, undefined)
          : []
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.ModelManifest}
 */
proto.carml.org.dlframework.ModelManifest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.ModelManifest();
  return proto.carml.org.dlframework.ModelManifest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.ModelManifest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.ModelManifest}
 */
proto.carml.org.dlframework.ModelManifest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setName(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setVersion(value);
        break;
      case 3:
        var value = new proto.carml.org.dlframework.FrameworkManifest();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.FrameworkManifest
            .deserializeBinaryFromReader
        );
        msg.setFramework(value);
        break;
      case 4:
        var value = msg.getContainerMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.carml.org.dlframework.ContainerHardware
              .deserializeBinaryFromReader
          );
        });
        break;
      case 5:
        var value /** @type {string} */ = reader.readString();
        msg.setDescription(value);
        break;
      case 6:
        var value /** @type {string} */ = reader.readString();
        msg.addReference(value);
        break;
      case 7:
        var value /** @type {string} */ = reader.readString();
        msg.setLicense(value);
        break;
      case 8:
        var value = new proto.carml.org.dlframework.ModelManifest.Type();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.ModelManifest.Type
            .deserializeBinaryFromReader
        );
        msg.addInputs(value);
        break;
      case 9:
        var value = new proto.carml.org.dlframework.ModelManifest.Type();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.ModelManifest.Type
            .deserializeBinaryFromReader
        );
        msg.setOutput(value);
        break;
      case 10:
        var value /** @type {string} */ = reader.readString();
        msg.setBeforePreprocess(value);
        break;
      case 11:
        var value /** @type {string} */ = reader.readString();
        msg.setPreprocess(value);
        break;
      case 12:
        var value /** @type {string} */ = reader.readString();
        msg.setAfterPreprocess(value);
        break;
      case 13:
        var value /** @type {string} */ = reader.readString();
        msg.setBeforePostprocess(value);
        break;
      case 14:
        var value /** @type {string} */ = reader.readString();
        msg.setPostprocess(value);
        break;
      case 15:
        var value /** @type {string} */ = reader.readString();
        msg.setAfterPostprocess(value);
        break;
      case 16:
        var value = new proto.carml.org.dlframework.ModelManifest.Model();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.ModelManifest.Model
            .deserializeBinaryFromReader
        );
        msg.setModel(value);
        break;
      case 17:
        var value = msg.getAttributesMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.ModelManifest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.ModelManifest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.ModelManifest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.ModelManifest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getFramework();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.carml.org.dlframework.FrameworkManifest.serializeBinaryToWriter
    );
  }
  f = message.getContainerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      4,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.carml.org.dlframework.ContainerHardware.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getReferenceList();
  if (f.length > 0) {
    writer.writeRepeatedString(6, f);
  }
  f = message.getLicense();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.carml.org.dlframework.ModelManifest.Type.serializeBinaryToWriter
    );
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.carml.org.dlframework.ModelManifest.Type.serializeBinaryToWriter
    );
  }
  f = message.getBeforePreprocess();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
  f = message.getPreprocess();
  if (f.length > 0) {
    writer.writeString(11, f);
  }
  f = message.getAfterPreprocess();
  if (f.length > 0) {
    writer.writeString(12, f);
  }
  f = message.getBeforePostprocess();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getPostprocess();
  if (f.length > 0) {
    writer.writeString(14, f);
  }
  f = message.getAfterPostprocess();
  if (f.length > 0) {
    writer.writeString(15, f);
  }
  f = message.getModel();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.carml.org.dlframework.ModelManifest.Model.serializeBinaryToWriter
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      17,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeString
    );
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.ModelManifest.Type = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.ModelManifest.Type, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.ModelManifest.Type.displayName =
    "proto.carml.org.dlframework.ModelManifest.Type";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.Type.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.ModelManifest.Type.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.ModelManifest.Type} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.Type.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, ""),
        description: jspb.Message.getFieldWithDefault(msg, 2, ""),
        parametersMap: (f = msg.getParametersMap())
          ? f.toObject(
              includeInstance,
              proto.carml.org.dlframework.ModelManifest.Type.Parameter.toObject
            )
          : []
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.ModelManifest.Type}
 */
proto.carml.org.dlframework.ModelManifest.Type.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.ModelManifest.Type();
  return proto.carml.org.dlframework.ModelManifest.Type.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.ModelManifest.Type} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.ModelManifest.Type}
 */
proto.carml.org.dlframework.ModelManifest.Type.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setType(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setDescription(value);
        break;
      case 3:
        var value = msg.getParametersMap();
        reader.readMessage(value, function(message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readMessage,
            proto.carml.org.dlframework.ModelManifest.Type.Parameter
              .deserializeBinaryFromReader
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.ModelManifest.Type.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.ModelManifest.Type.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.ModelManifest.Type} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.ModelManifest.Type.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(
      3,
      writer,
      jspb.BinaryWriter.prototype.writeString,
      jspb.BinaryWriter.prototype.writeMessage,
      proto.carml.org.dlframework.ModelManifest.Type.Parameter
        .serializeBinaryToWriter
    );
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.carml.org.dlframework.ModelManifest.Type.Parameter,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.ModelManifest.Type.Parameter.displayName =
    "proto.carml.org.dlframework.ModelManifest.Type.Parameter";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.Type.Parameter.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.ModelManifest.Type.Parameter.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.ModelManifest.Type.Parameter} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.Type.Parameter.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        value:
          (f = msg.getValue()) &&
            google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.ModelManifest.Type.Parameter}
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.ModelManifest.Type.Parameter();
  return proto.carml.org.dlframework.ModelManifest.Type.Parameter.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.ModelManifest.Type.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.ModelManifest.Type.Parameter}
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_struct_pb.Struct();
        reader.readMessage(
          value,
          google_protobuf_struct_pb.Struct.deserializeBinaryFromReader
        );
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.ModelManifest.Type.Parameter.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.ModelManifest.Type.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};

/**
 * optional google.protobuf.Struct value = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Struct} */ jspb.Message.getWrapperField(
    this,
    google_protobuf_struct_pb.Struct,
    1
  );
};

/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.prototype.setValue = function(
  value
) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.carml.org.dlframework.ModelManifest.Type.Parameter.prototype.clearValue = function() {
  this.setValue(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.ModelManifest.Type.Parameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string type = 1;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.Type.prototype.getType = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.Type.prototype.setType = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string description = 2;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.Type.prototype.getDescription = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.Type.prototype.setDescription = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * map<string, Parameter> parameters = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.carml.org.dlframework.ModelManifest.Type.Parameter>}
 */
proto.carml.org.dlframework.ModelManifest.Type.prototype.getParametersMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!proto.carml.org.dlframework.ModelManifest.Type.Parameter>} */ jspb.Message.getMapField(
    this,
    3,
    opt_noLazyCreate,
    proto.carml.org.dlframework.ModelManifest.Type.Parameter
  );
};

proto.carml.org.dlframework.ModelManifest.Type.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.ModelManifest.Model = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.ModelManifest.Model, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.ModelManifest.Model.displayName =
    "proto.carml.org.dlframework.ModelManifest.Model";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.Model.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.ModelManifest.Model.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.ModelManifest.Model} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.ModelManifest.Model.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        baseUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
        weightsPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
        graphPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
        isArchive: jspb.Message.getFieldWithDefault(msg, 4, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.ModelManifest.Model}
 */
proto.carml.org.dlframework.ModelManifest.Model.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.ModelManifest.Model();
  return proto.carml.org.dlframework.ModelManifest.Model.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.ModelManifest.Model} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.ModelManifest.Model}
 */
proto.carml.org.dlframework.ModelManifest.Model.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setBaseUrl(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setWeightsPath(value);
        break;
      case 3:
        var value /** @type {string} */ = reader.readString();
        msg.setGraphPath(value);
        break;
      case 4:
        var value /** @type {boolean} */ = reader.readBool();
        msg.setIsArchive(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.ModelManifest.Model.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.ModelManifest.Model.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.ModelManifest.Model} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.ModelManifest.Model.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getBaseUrl();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getWeightsPath();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getGraphPath();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getIsArchive();
  if (f) {
    writer.writeBool(4, f);
  }
};

/**
 * optional string base_url = 1;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.Model.prototype.getBaseUrl = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.Model.prototype.setBaseUrl = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string weights_path = 2;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.Model.prototype.getWeightsPath = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.Model.prototype.setWeightsPath = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string graph_path = 3;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.Model.prototype.getGraphPath = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.Model.prototype.setGraphPath = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bool is_archive = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.carml.org.dlframework.ModelManifest.Model.prototype.getIsArchive = function() {
  return /** @type {boolean} */ jspb.Message.getFieldWithDefault(
    this,
    4,
    false
  );
};

/** @param {boolean} value */
proto.carml.org.dlframework.ModelManifest.Model.prototype.setIsArchive = function(
  value
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string version = 2;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setVersion = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional FrameworkManifest framework = 3;
 * @return {?proto.carml.org.dlframework.FrameworkManifest}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getFramework = function() {
  return /** @type{?proto.carml.org.dlframework.FrameworkManifest} */ jspb.Message.getWrapperField(
    this,
    proto.carml.org.dlframework.FrameworkManifest,
    3
  );
};

/** @param {?proto.carml.org.dlframework.FrameworkManifest|undefined} value */
proto.carml.org.dlframework.ModelManifest.prototype.setFramework = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.carml.org.dlframework.ModelManifest.prototype.clearFramework = function() {
  this.setFramework(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.ModelManifest.prototype.hasFramework = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * map<string, ContainerHardware> container = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.carml.org.dlframework.ContainerHardware>}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getContainerMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,!proto.carml.org.dlframework.ContainerHardware>} */ jspb.Message.getMapField(
    this,
    4,
    opt_noLazyCreate,
    proto.carml.org.dlframework.ContainerHardware
  );
};

proto.carml.org.dlframework.ModelManifest.prototype.clearContainerMap = function() {
  this.getContainerMap().clear();
};

/**
 * optional string description = 5;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getDescription = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 5, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setDescription = function(
  value
) {
  jspb.Message.setField(this, 5, value);
};

/**
 * repeated string reference = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getReferenceList = function() {
  return /** @type {!Array.<string>} */ jspb.Message.getField(this, 6);
};

/** @param {!Array.<string>} value */
proto.carml.org.dlframework.ModelManifest.prototype.setReferenceList = function(
  value
) {
  jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.carml.org.dlframework.ModelManifest.prototype.addReference = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

proto.carml.org.dlframework.ModelManifest.prototype.clearReferenceList = function() {
  this.setReferenceList([]);
};

/**
 * optional string license = 7;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getLicense = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 7, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setLicense = function(
  value
) {
  jspb.Message.setField(this, 7, value);
};

/**
 * repeated Type inputs = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.dlframework.ModelManifest.Type>}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getInputsList = function() {
  return /** @type{!Array.<!proto.carml.org.dlframework.ModelManifest.Type>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.dlframework.ModelManifest.Type,
    8
  );
};

/** @param {!Array.<!proto.carml.org.dlframework.ModelManifest.Type>} value */
proto.carml.org.dlframework.ModelManifest.prototype.setInputsList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.carml.org.dlframework.ModelManifest.Type=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.dlframework.ModelManifest.Type}
 */
proto.carml.org.dlframework.ModelManifest.prototype.addInputs = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    8,
    opt_value,
    proto.carml.org.dlframework.ModelManifest.Type,
    opt_index
  );
};

proto.carml.org.dlframework.ModelManifest.prototype.clearInputsList = function() {
  this.setInputsList([]);
};

/**
 * optional Type output = 9;
 * @return {?proto.carml.org.dlframework.ModelManifest.Type}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getOutput = function() {
  return /** @type{?proto.carml.org.dlframework.ModelManifest.Type} */ jspb.Message.getWrapperField(
    this,
    proto.carml.org.dlframework.ModelManifest.Type,
    9
  );
};

/** @param {?proto.carml.org.dlframework.ModelManifest.Type|undefined} value */
proto.carml.org.dlframework.ModelManifest.prototype.setOutput = function(
  value
) {
  jspb.Message.setWrapperField(this, 9, value);
};

proto.carml.org.dlframework.ModelManifest.prototype.clearOutput = function() {
  this.setOutput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.ModelManifest.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * optional string before_preprocess = 10;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getBeforePreprocess = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 10, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setBeforePreprocess = function(
  value
) {
  jspb.Message.setField(this, 10, value);
};

/**
 * optional string preprocess = 11;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getPreprocess = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 11, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setPreprocess = function(
  value
) {
  jspb.Message.setField(this, 11, value);
};

/**
 * optional string after_preprocess = 12;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getAfterPreprocess = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 12, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setAfterPreprocess = function(
  value
) {
  jspb.Message.setField(this, 12, value);
};

/**
 * optional string before_postprocess = 13;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getBeforePostprocess = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 13, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setBeforePostprocess = function(
  value
) {
  jspb.Message.setField(this, 13, value);
};

/**
 * optional string postprocess = 14;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getPostprocess = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 14, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setPostprocess = function(
  value
) {
  jspb.Message.setField(this, 14, value);
};

/**
 * optional string after_postprocess = 15;
 * @return {string}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getAfterPostprocess = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 15, "");
};

/** @param {string} value */
proto.carml.org.dlframework.ModelManifest.prototype.setAfterPostprocess = function(
  value
) {
  jspb.Message.setField(this, 15, value);
};

/**
 * optional Model model = 16;
 * @return {?proto.carml.org.dlframework.ModelManifest.Model}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getModel = function() {
  return /** @type{?proto.carml.org.dlframework.ModelManifest.Model} */ jspb.Message.getWrapperField(
    this,
    proto.carml.org.dlframework.ModelManifest.Model,
    16
  );
};

/** @param {?proto.carml.org.dlframework.ModelManifest.Model|undefined} value */
proto.carml.org.dlframework.ModelManifest.prototype.setModel = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};

proto.carml.org.dlframework.ModelManifest.prototype.clearModel = function() {
  this.setModel(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.ModelManifest.prototype.hasModel = function() {
  return jspb.Message.getField(this, 16) != null;
};

/**
 * map<string, string> attributes = 17;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.carml.org.dlframework.ModelManifest.prototype.getAttributesMap = function(
  opt_noLazyCreate
) {
  return /** @type {!jspb.Map<string,string>} */ jspb.Message.getMapField(
    this,
    17,
    opt_noLazyCreate,
    null
  );
};

proto.carml.org.dlframework.ModelManifest.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.GetModelManifestsResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.dlframework.GetModelManifestsResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.carml.org.dlframework.GetModelManifestsResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.GetModelManifestsResponse.displayName =
    "proto.carml.org.dlframework.GetModelManifestsResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.dlframework.GetModelManifestsResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetModelManifestsResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.GetModelManifestsResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.GetModelManifestsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetModelManifestsResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        manifestsList: jspb.Message.toObjectList(
          msg.getManifestsList(),
          proto.carml.org.dlframework.ModelManifest.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.GetModelManifestsResponse}
 */
proto.carml.org.dlframework.GetModelManifestsResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.GetModelManifestsResponse();
  return proto.carml.org.dlframework.GetModelManifestsResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.GetModelManifestsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.GetModelManifestsResponse}
 */
proto.carml.org.dlframework.GetModelManifestsResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.carml.org.dlframework.ModelManifest();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.ModelManifest.deserializeBinaryFromReader
        );
        msg.addManifests(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.GetModelManifestsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.GetModelManifestsResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.GetModelManifestsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.GetModelManifestsResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getManifestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.carml.org.dlframework.ModelManifest.serializeBinaryToWriter
    );
  }
};

/**
 * repeated ModelManifest manifests = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.dlframework.ModelManifest>}
 */
proto.carml.org.dlframework.GetModelManifestsResponse.prototype.getManifestsList = function() {
  return /** @type{!Array.<!proto.carml.org.dlframework.ModelManifest>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.dlframework.ModelManifest,
    1
  );
};

/** @param {!Array.<!proto.carml.org.dlframework.ModelManifest>} value */
proto.carml.org.dlframework.GetModelManifestsResponse.prototype.setManifestsList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.carml.org.dlframework.ModelManifest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.dlframework.ModelManifest}
 */
proto.carml.org.dlframework.GetModelManifestsResponse.prototype.addManifests = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.carml.org.dlframework.ModelManifest,
    opt_index
  );
};

proto.carml.org.dlframework.GetModelManifestsResponse.prototype.clearManifestsList = function() {
  this.setManifestsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.dlframework.GetFrameworkManifestsResponse.repeatedFields_,
    null
  );
};
goog.inherits(
  proto.carml.org.dlframework.GetFrameworkManifestsResponse,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.GetFrameworkManifestsResponse.displayName =
    "proto.carml.org.dlframework.GetFrameworkManifestsResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetFrameworkManifestsResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.GetFrameworkManifestsResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.GetFrameworkManifestsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetFrameworkManifestsResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        manifestsList: jspb.Message.toObjectList(
          msg.getManifestsList(),
          proto.carml.org.dlframework.FrameworkManifest.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.GetFrameworkManifestsResponse}
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.GetFrameworkManifestsResponse();
  return proto.carml.org.dlframework.GetFrameworkManifestsResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.GetFrameworkManifestsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.GetFrameworkManifestsResponse}
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.carml.org.dlframework.FrameworkManifest();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.FrameworkManifest
            .deserializeBinaryFromReader
        );
        msg.addManifests(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.GetFrameworkManifestsResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.GetFrameworkManifestsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getManifestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.carml.org.dlframework.FrameworkManifest.serializeBinaryToWriter
    );
  }
};

/**
 * repeated FrameworkManifest manifests = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.dlframework.FrameworkManifest>}
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.prototype.getManifestsList = function() {
  return /** @type{!Array.<!proto.carml.org.dlframework.FrameworkManifest>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.dlframework.FrameworkManifest,
    1
  );
};

/** @param {!Array.<!proto.carml.org.dlframework.FrameworkManifest>} value */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.prototype.setManifestsList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.carml.org.dlframework.FrameworkManifest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.dlframework.FrameworkManifest}
 */
proto.carml.org.dlframework.GetFrameworkManifestsResponse.prototype.addManifests = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.carml.org.dlframework.FrameworkManifest,
    opt_index
  );
};

proto.carml.org.dlframework.GetFrameworkManifestsResponse.prototype.clearManifestsList = function() {
  this.setManifestsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest = function(
  opt_data
) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.carml.org.dlframework.GetFrameworkModelManifestRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.GetFrameworkModelManifestRequest.displayName =
    "proto.carml.org.dlframework.GetFrameworkModelManifestRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.GetFrameworkModelManifestRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.GetFrameworkModelManifestRequest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetFrameworkModelManifestRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        frameworkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        frameworkVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
        modelName: jspb.Message.getFieldWithDefault(msg, 3, ""),
        modelVersion: jspb.Message.getFieldWithDefault(msg, 4, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.GetFrameworkModelManifestRequest}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.GetFrameworkModelManifestRequest();
  return proto.carml.org.dlframework.GetFrameworkModelManifestRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.GetFrameworkModelManifestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.GetFrameworkModelManifestRequest}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setFrameworkName(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setFrameworkVersion(value);
        break;
      case 3:
        var value /** @type {string} */ = reader.readString();
        msg.setModelName(value);
        break;
      case 4:
        var value /** @type {string} */ = reader.readString();
        msg.setModelVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.GetFrameworkModelManifestRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.GetFrameworkModelManifestRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getFrameworkName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFrameworkVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getModelVersion();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string framework_name = 1;
 * @return {string}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.getFrameworkName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.setFrameworkName = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string framework_version = 2;
 * @return {string}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.getFrameworkVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.setFrameworkVersion = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string model_name = 3;
 * @return {string}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.getModelName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.setModelName = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string model_version = 4;
 * @return {string}
 */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.getModelVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetFrameworkModelManifestRequest.prototype.setModelVersion = function(
  value
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.GetModelManifestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.carml.org.dlframework.GetModelManifestRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.GetModelManifestRequest.displayName =
    "proto.carml.org.dlframework.GetModelManifestRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetModelManifestRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.GetModelManifestRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.GetModelManifestRequest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetModelManifestRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        modelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        modelVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.GetModelManifestRequest}
 */
proto.carml.org.dlframework.GetModelManifestRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.GetModelManifestRequest();
  return proto.carml.org.dlframework.GetModelManifestRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.GetModelManifestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.GetModelManifestRequest}
 */
proto.carml.org.dlframework.GetModelManifestRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setModelName(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setModelVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.GetModelManifestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.GetModelManifestRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.GetModelManifestRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.GetModelManifestRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getModelVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.carml.org.dlframework.GetModelManifestRequest.prototype.getModelName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetModelManifestRequest.prototype.setModelName = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string model_version = 2;
 * @return {string}
 */
proto.carml.org.dlframework.GetModelManifestRequest.prototype.getModelVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetModelManifestRequest.prototype.setModelVersion = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.carml.org.dlframework.GetFrameworkManifestRequest,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.GetFrameworkManifestRequest.displayName =
    "proto.carml.org.dlframework.GetFrameworkManifestRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetFrameworkManifestRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.GetFrameworkManifestRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.GetFrameworkManifestRequest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.GetFrameworkManifestRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        frameworkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        frameworkVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.GetFrameworkManifestRequest}
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.GetFrameworkManifestRequest();
  return proto.carml.org.dlframework.GetFrameworkManifestRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.GetFrameworkManifestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.GetFrameworkManifestRequest}
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setFrameworkName(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setFrameworkVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.GetFrameworkManifestRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.GetFrameworkManifestRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getFrameworkName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFrameworkVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string framework_name = 1;
 * @return {string}
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest.prototype.getFrameworkName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetFrameworkManifestRequest.prototype.setFrameworkName = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string framework_version = 2;
 * @return {string}
 */
proto.carml.org.dlframework.GetFrameworkManifestRequest.prototype.getFrameworkVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.GetFrameworkManifestRequest.prototype.setFrameworkVersion = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.Null = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.Null, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.Null.displayName =
    "proto.carml.org.dlframework.Null";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.Null.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.Null.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.Null} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.Null.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.Null}
 */
proto.carml.org.dlframework.Null.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.Null();
  return proto.carml.org.dlframework.Null.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.Null} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.Null}
 */
proto.carml.org.dlframework.Null.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.Null.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.Null.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.Null} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.Null.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.PredictRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.carml.org.dlframework.PredictRequest.oneofGroups_
  );
};
goog.inherits(proto.carml.org.dlframework.PredictRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.PredictRequest.displayName =
    "proto.carml.org.dlframework.PredictRequest";
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.carml.org.dlframework.PredictRequest.oneofGroups_ = [[6, 7]];

/**
 * @enum {number}
 */
proto.carml.org.dlframework.PredictRequest.InputCase = {
  INPUT_NOT_SET: 0,
  DATA: 6,
  URL: 7
};

/**
 * @return {proto.carml.org.dlframework.PredictRequest.InputCase}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getInputCase = function() {
  return /** @type {proto.carml.org.dlframework.PredictRequest.InputCase} */ jspb.Message.computeOneofCase(
    this,
    proto.carml.org.dlframework.PredictRequest.oneofGroups_[0]
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.PredictRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.PredictRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.PredictRequest} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.PredictRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        modelName: jspb.Message.getFieldWithDefault(msg, 1, ""),
        modelVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
        frameworkName: jspb.Message.getFieldWithDefault(msg, 3, ""),
        frameworkVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
        limit: jspb.Message.getFieldWithDefault(msg, 5, 0),
        data: msg.getData_asB64(),
        url: jspb.Message.getFieldWithDefault(msg, 7, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.PredictRequest}
 */
proto.carml.org.dlframework.PredictRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.PredictRequest();
  return proto.carml.org.dlframework.PredictRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.PredictRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.PredictRequest}
 */
proto.carml.org.dlframework.PredictRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setModelName(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setModelVersion(value);
        break;
      case 3:
        var value /** @type {string} */ = reader.readString();
        msg.setFrameworkName(value);
        break;
      case 4:
        var value /** @type {string} */ = reader.readString();
        msg.setFrameworkVersion(value);
        break;
      case 5:
        var value /** @type {number} */ = reader.readInt32();
        msg.setLimit(value);
        break;
      case 6:
        var value /** @type {!Uint8Array} */ = reader.readBytes();
        msg.setData(value);
        break;
      case 7:
        var value /** @type {string} */ = reader.readString();
        msg.setUrl(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.PredictRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.PredictRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.PredictRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.PredictRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getModelVersion();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getFrameworkName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getFrameworkVersion();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f /** @type {!(string|Uint8Array)} */ = jspb.Message.getField(message, 6);
  if (f != null) {
    writer.writeBytes(6, f);
  }
  f /** @type {string} */ = jspb.Message.getField(message, 7);
  if (f != null) {
    writer.writeString(7, f);
  }
};

/**
 * optional string model_name = 1;
 * @return {string}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getModelName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictRequest.prototype.setModelName = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string model_version = 2;
 * @return {string}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getModelVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictRequest.prototype.setModelVersion = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string framework_name = 3;
 * @return {string}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getFrameworkName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 3, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictRequest.prototype.setFrameworkName = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional string framework_version = 4;
 * @return {string}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getFrameworkVersion = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 4, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictRequest.prototype.setFrameworkVersion = function(
  value
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional int32 limit = 5;
 * @return {number}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getLimit = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 5, 0);
};

/** @param {number} value */
proto.carml.org.dlframework.PredictRequest.prototype.setLimit = function(
  value
) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ jspb.Message.getFieldWithDefault(
    this,
    6,
    ""
  );
};

/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ jspb.Message.bytesAsB64(this.getData());
};

/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ jspb.Message.bytesAsU8(this.getData());
};

/** @param {!(string|Uint8Array)} value */
proto.carml.org.dlframework.PredictRequest.prototype.setData = function(value) {
  jspb.Message.setOneofField(
    this,
    6,
    proto.carml.org.dlframework.PredictRequest.oneofGroups_[0],
    value
  );
};

proto.carml.org.dlframework.PredictRequest.prototype.clearData = function() {
  jspb.Message.setOneofField(
    this,
    6,
    proto.carml.org.dlframework.PredictRequest.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.PredictRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional string url = 7;
 * @return {string}
 */
proto.carml.org.dlframework.PredictRequest.prototype.getUrl = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 7, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictRequest.prototype.setUrl = function(value) {
  jspb.Message.setOneofField(
    this,
    7,
    proto.carml.org.dlframework.PredictRequest.oneofGroups_[0],
    value
  );
};

proto.carml.org.dlframework.PredictRequest.prototype.clearUrl = function() {
  jspb.Message.setOneofField(
    this,
    7,
    proto.carml.org.dlframework.PredictRequest.oneofGroups_[0],
    undefined
  );
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.PredictRequest.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.PredictionFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.carml.org.dlframework.PredictionFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.PredictionFeature.displayName =
    "proto.carml.org.dlframework.PredictionFeature";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.PredictionFeature.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.PredictionFeature.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.PredictionFeature} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.PredictionFeature.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        index: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 2, ""),
        probability: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.PredictionFeature}
 */
proto.carml.org.dlframework.PredictionFeature.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.PredictionFeature();
  return proto.carml.org.dlframework.PredictionFeature.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.PredictionFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.PredictionFeature}
 */
proto.carml.org.dlframework.PredictionFeature.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {number} */ = reader.readInt64();
        msg.setIndex(value);
        break;
      case 2:
        var value /** @type {string} */ = reader.readString();
        msg.setName(value);
        break;
      case 3:
        var value /** @type {number} */ = reader.readFloat();
        msg.setProbability(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.PredictionFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.PredictionFeature.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.PredictionFeature} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.PredictionFeature.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getProbability();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
};

/**
 * optional int64 index = 1;
 * @return {number}
 */
proto.carml.org.dlframework.PredictionFeature.prototype.getIndex = function() {
  return /** @type {number} */ jspb.Message.getFieldWithDefault(this, 1, 0);
};

/** @param {number} value */
proto.carml.org.dlframework.PredictionFeature.prototype.setIndex = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.carml.org.dlframework.PredictionFeature.prototype.getName = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 2, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictionFeature.prototype.setName = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional float probability = 3;
 * @return {number}
 */
proto.carml.org.dlframework.PredictionFeature.prototype.getProbability = function() {
  return /** @type {number} */ +jspb.Message.getFieldWithDefault(this, 3, 0.0);
};

/** @param {number} value */
proto.carml.org.dlframework.PredictionFeature.prototype.setProbability = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.carml.org.dlframework.PredictResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.carml.org.dlframework.PredictResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.carml.org.dlframework.PredictResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.carml.org.dlframework.PredictResponse.displayName =
    "proto.carml.org.dlframework.PredictResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.carml.org.dlframework.PredictResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.carml.org.dlframework.PredictResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.carml.org.dlframework.PredictResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.carml.org.dlframework.PredictResponse} msg The msg instance to transform.
 * @return {!Object}
 */
  proto.carml.org.dlframework.PredictResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        featuresList: jspb.Message.toObjectList(
          msg.getFeaturesList(),
          proto.carml.org.dlframework.PredictionFeature.toObject,
          includeInstance
        ),
        error:
          (f = msg.getError()) &&
            proto.carml.org.dlframework.ErrorStatus.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.carml.org.dlframework.PredictResponse}
 */
proto.carml.org.dlframework.PredictResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.carml.org.dlframework.PredictResponse();
  return proto.carml.org.dlframework.PredictResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.carml.org.dlframework.PredictResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.carml.org.dlframework.PredictResponse}
 */
proto.carml.org.dlframework.PredictResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value /** @type {string} */ = reader.readString();
        msg.setId(value);
        break;
      case 2:
        var value = new proto.carml.org.dlframework.PredictionFeature();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.PredictionFeature
            .deserializeBinaryFromReader
        );
        msg.addFeatures(value);
        break;
      case 3:
        var value = new proto.carml.org.dlframework.ErrorStatus();
        reader.readMessage(
          value,
          proto.carml.org.dlframework.ErrorStatus.deserializeBinaryFromReader
        );
        msg.setError(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.carml.org.dlframework.PredictResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.carml.org.dlframework.PredictResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.carml.org.dlframework.PredictResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.carml.org.dlframework.PredictResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.carml.org.dlframework.PredictionFeature.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.carml.org.dlframework.ErrorStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.carml.org.dlframework.PredictResponse.prototype.getId = function() {
  return /** @type {string} */ jspb.Message.getFieldWithDefault(this, 1, "");
};

/** @param {string} value */
proto.carml.org.dlframework.PredictResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated PredictionFeature features = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.carml.org.dlframework.PredictionFeature>}
 */
proto.carml.org.dlframework.PredictResponse.prototype.getFeaturesList = function() {
  return /** @type{!Array.<!proto.carml.org.dlframework.PredictionFeature>} */ jspb.Message.getRepeatedWrapperField(
    this,
    proto.carml.org.dlframework.PredictionFeature,
    2
  );
};

/** @param {!Array.<!proto.carml.org.dlframework.PredictionFeature>} value */
proto.carml.org.dlframework.PredictResponse.prototype.setFeaturesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.carml.org.dlframework.PredictionFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.carml.org.dlframework.PredictionFeature}
 */
proto.carml.org.dlframework.PredictResponse.prototype.addFeatures = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.carml.org.dlframework.PredictionFeature,
    opt_index
  );
};

proto.carml.org.dlframework.PredictResponse.prototype.clearFeaturesList = function() {
  this.setFeaturesList([]);
};

/**
 * optional ErrorStatus error = 3;
 * @return {?proto.carml.org.dlframework.ErrorStatus}
 */
proto.carml.org.dlframework.PredictResponse.prototype.getError = function() {
  return /** @type{?proto.carml.org.dlframework.ErrorStatus} */ jspb.Message.getWrapperField(
    this,
    proto.carml.org.dlframework.ErrorStatus,
    3
  );
};

/** @param {?proto.carml.org.dlframework.ErrorStatus|undefined} value */
proto.carml.org.dlframework.PredictResponse.prototype.setError = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.carml.org.dlframework.PredictResponse.prototype.clearError = function() {
  this.setError(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.carml.org.dlframework.PredictResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};

goog.object.extend(exports, proto.carml.org.dlframework);
