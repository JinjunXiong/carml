// Code generated by protoc-gen-gogo.
// source: proto/carml.org/inference/inference.proto
// DO NOT EDIT!

/*
	Package carml_org_docker is a generated protocol buffer package.

	It is generated from these files:
		proto/carml.org/inference/inference.proto

	It has these top-level messages:
		InferenceRequest
		InferenceResponse
		ErrorStatus
*/
package carml_org_docker

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InferenceRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *InferenceRequest) Reset()                    { *m = InferenceRequest{} }
func (*InferenceRequest) ProtoMessage()               {}
func (*InferenceRequest) Descriptor() ([]byte, []int) { return fileDescriptorInference, []int{0} }

func (m *InferenceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type InferenceResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// todo...
	Error *ErrorStatus `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *InferenceResponse) Reset()                    { *m = InferenceResponse{} }
func (*InferenceResponse) ProtoMessage()               {}
func (*InferenceResponse) Descriptor() ([]byte, []int) { return fileDescriptorInference, []int{1} }

func (m *InferenceResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InferenceResponse) GetError() *ErrorStatus {
	if m != nil {
		return m.Error
	}
	return nil
}

type ErrorStatus struct {
	Message string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Details []*google_protobuf.Any `protobuf:"bytes,2,rep,name=details" json:"details,omitempty"`
}

func (m *ErrorStatus) Reset()                    { *m = ErrorStatus{} }
func (*ErrorStatus) ProtoMessage()               {}
func (*ErrorStatus) Descriptor() ([]byte, []int) { return fileDescriptorInference, []int{2} }

func (m *ErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorStatus) GetDetails() []*google_protobuf.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*InferenceRequest)(nil), "carml.org.docker.InferenceRequest")
	proto.RegisterType((*InferenceResponse)(nil), "carml.org.docker.InferenceResponse")
	proto.RegisterType((*ErrorStatus)(nil), "carml.org.docker.ErrorStatus")
}
func (this *InferenceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InferenceRequest)
	if !ok {
		that2, ok := that.(InferenceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *InferenceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InferenceResponse)
	if !ok {
		that2, ok := that.(InferenceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *ErrorStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ErrorStatus)
	if !ok {
		that2, ok := that.(ErrorStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	return true
}
func (this *InferenceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&carml_org_docker.InferenceRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InferenceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carml_org_docker.InferenceResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&carml_org_docker.ErrorStatus{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInference(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InferenceService service

type InferenceServiceClient interface {
	Infer(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (InferenceService_InferClient, error)
}

type inferenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewInferenceServiceClient(cc *grpc.ClientConn) InferenceServiceClient {
	return &inferenceServiceClient{cc}
}

func (c *inferenceServiceClient) Infer(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (InferenceService_InferClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InferenceService_serviceDesc.Streams[0], c.cc, "/carml.org.docker.InferenceService/Infer", opts...)
	if err != nil {
		return nil, err
	}
	x := &inferenceServiceInferClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InferenceService_InferClient interface {
	Recv() (*InferenceResponse, error)
	grpc.ClientStream
}

type inferenceServiceInferClient struct {
	grpc.ClientStream
}

func (x *inferenceServiceInferClient) Recv() (*InferenceResponse, error) {
	m := new(InferenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InferenceService service

type InferenceServiceServer interface {
	Infer(*InferenceRequest, InferenceService_InferServer) error
}

func RegisterInferenceServiceServer(s *grpc.Server, srv InferenceServiceServer) {
	s.RegisterService(&_InferenceService_serviceDesc, srv)
}

func _InferenceService_Infer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InferenceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InferenceServiceServer).Infer(m, &inferenceServiceInferServer{stream})
}

type InferenceService_InferServer interface {
	Send(*InferenceResponse) error
	grpc.ServerStream
}

type inferenceServiceInferServer struct {
	grpc.ServerStream
}

func (x *inferenceServiceInferServer) Send(m *InferenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _InferenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carml.org.docker.InferenceService",
	HandlerType: (*InferenceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Infer",
			Handler:       _InferenceService_Infer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/carml.org/inference/inference.proto",
}

func (m *InferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInference(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *InferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInference(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInference(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ErrorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInference(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInference(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Inference(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Inference(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInference(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InferenceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	return n
}

func (m *InferenceResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovInference(uint64(l))
	}
	return n
}

func (m *ErrorStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovInference(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovInference(uint64(l))
		}
	}
	return n
}

func sovInference(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInference(x uint64) (n int) {
	return sovInference(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InferenceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InferenceRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InferenceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InferenceResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorStatus", "ErrorStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorStatus{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInference(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ErrorStatus{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInference
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInference
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInference
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &google_protobuf.Any{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInference(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInference
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInference(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInference
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInference
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInference
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInference
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInference(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInference = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInference   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/carml.org/inference/inference.proto", fileDescriptorInference) }

var fileDescriptorInference = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4a, 0xf3, 0x40,
	0x1c, 0xc5, 0x33, 0x29, 0xfd, 0xca, 0x37, 0x01, 0xa9, 0x83, 0x8b, 0x58, 0x70, 0x08, 0xe3, 0x26,
	0x82, 0x4c, 0x24, 0x3d, 0x81, 0x82, 0x0b, 0xb7, 0xa9, 0xa0, 0xdb, 0x34, 0xf9, 0x37, 0x06, 0xd3,
	0x4c, 0x9d, 0x49, 0x84, 0xee, 0x3c, 0x82, 0xc7, 0xf0, 0x28, 0x2e, 0xbb, 0x74, 0x69, 0xc6, 0x8d,
	0xcb, 0x1e, 0x41, 0x4c, 0x8c, 0x86, 0x08, 0xee, 0x66, 0xde, 0xfb, 0xcd, 0xf0, 0xde, 0xc3, 0x47,
	0x2b, 0x29, 0x0a, 0xe1, 0x45, 0xa1, 0x5c, 0x66, 0x5c, 0xc8, 0xc4, 0x4b, 0xf3, 0x05, 0x48, 0xc8,
	0x23, 0xf8, 0x39, 0xf1, 0x9a, 0x21, 0xe3, 0x6f, 0x88, 0xc7, 0x22, 0xba, 0x05, 0x39, 0xd9, 0x4f,
	0x84, 0x48, 0x32, 0xf0, 0x6a, 0x7f, 0x5e, 0x2e, 0xbc, 0x30, 0x5f, 0x37, 0x30, 0x63, 0x78, 0x7c,
	0xd1, 0xbe, 0x0f, 0xe0, 0xae, 0x04, 0x55, 0x90, 0x1d, 0x6c, 0xa6, 0xb1, 0x8d, 0x1c, 0xe4, 0xfe,
	0x0f, 0xcc, 0x34, 0x66, 0xd7, 0x78, 0xb7, 0xc3, 0xa8, 0x95, 0xc8, 0x15, 0xf4, 0x21, 0x32, 0xc5,
	0x43, 0x90, 0x52, 0x48, 0x7b, 0xe0, 0x20, 0xd7, 0xf2, 0x0f, 0x78, 0x3f, 0x05, 0x3f, 0xff, 0xb4,
	0x67, 0x45, 0x58, 0x94, 0x2a, 0x68, 0x58, 0x76, 0x85, 0xad, 0x8e, 0x4a, 0x6c, 0x3c, 0x5a, 0x82,
	0x52, 0x61, 0x02, 0x5f, 0x1f, 0xb7, 0x57, 0xc2, 0xf1, 0x28, 0x86, 0x22, 0x4c, 0x33, 0x65, 0x9b,
	0xce, 0xc0, 0xb5, 0xfc, 0x3d, 0xde, 0x74, 0xe2, 0x6d, 0x27, 0x7e, 0x9a, 0xaf, 0x83, 0x16, 0xf2,
	0x6f, 0x3a, 0xb5, 0x66, 0x20, 0xef, 0xd3, 0x08, 0xc8, 0x25, 0x1e, 0xd6, 0x1a, 0x61, 0xbf, 0xb3,
	0xf5, 0x37, 0x98, 0x1c, 0xfe, 0xc9, 0x34, 0x1b, 0x30, 0xe3, 0x04, 0x9d, 0x1d, 0x6f, 0x2a, 0x6a,
	0xbc, 0x54, 0xd4, 0xd8, 0x56, 0x14, 0x3d, 0x68, 0x8a, 0x9e, 0x34, 0x45, 0xcf, 0x9a, 0xa2, 0x8d,
	0xa6, 0xe8, 0x55, 0x53, 0xf4, 0xae, 0xa9, 0xb1, 0xd5, 0x14, 0x3d, 0xbe, 0x51, 0x63, 0xfe, 0xaf,
	0x8e, 0x3b, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xca, 0xc2, 0x94, 0xcf, 0x01, 0x00, 0x00,
}
